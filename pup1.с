#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Функция для выделения памяти под матрицу
double** allocateMatrix(int rows, int cols) {
    double** matrix = (double**)malloc(rows * sizeof(double*));
    for (int i = 0; i < rows; i++) {
        matrix[i] = (double*)malloc(cols * sizeof(double));
    }
    return matrix;
}

// Функция для освобождения памяти, выделенной под матрицу
void freeMatrix(double** matrix, int rows) {
    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

// Функция для генерации случайной матрицы
void generateRandomMatrix(double** matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrix[i][j] = (rand() % 10) + 1;  // Генерация случайного числа от 1 до 10
        }
    }
}

// Функция для перемножения двух матриц
double** multiplyMatrices(double** matrix1, double** matrix2, int rows1, int cols1, int cols2) {
    double** result = allocateMatrix(rows1, cols2);
    
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols2; j++) {
            result[i][j] = 0;
            for (int k = 0; k < cols1; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
    return result;
}

// Функция для сложения двух матриц
double** addMatrices(double** matrix1, double** matrix2, int rows, int cols) {
    double** result = allocateMatrix(rows, cols);
    
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }
    return result;
}

// Функция для записи матриц в файл
void writeMatrixToFile(double** matrix, int rows, int cols, FILE* file) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            fprintf(file, "%lf ", matrix[i][j]);
        }
        fprintf(file, "\n");
    }
    fprintf(file, "\n");
}

// Функция для считывания матриц из файла
double** readMatrixFromFile(int rows, int cols, FILE* file) {
    double** matrix = allocateMatrix(rows, cols);
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            fscanf(file, "%lf", &matrix[i][j]);
        }
    }
    return matrix;
}

int main() {
    int rows, cols;
    printf("Enter the number of rows for the matrices: ");
    scanf("%d", &rows);
    printf("Enter the number of columns for the matrices: ");
    scanf("%d", &cols);

    FILE* input = fopen("input.txt", "w");

    double** matrix1 = allocateMatrix(rows, cols);
    double** matrix2 = allocateMatrix(rows, cols);

    generateRandomMatrix(matrix1, rows, cols);
    generateRandomMatrix(matrix2, rows, cols);

    writeMatrixToFile(matrix1, rows, cols, input);
    writeMatrixToFile(matrix2, rows, cols, input);

    fclose(input);
    freeMatrix(matrix1, rows);
    freeMatrix(matrix2, rows);

    input = fopen("input.txt", "r");
    FILE* output = fopen("output.txt", "w");

    matrix1 = readMatrixFromFile(rows, cols, input);
    matrix2 = readMatrixFromFile(rows, cols, input);

    clock_t start = clock();

    double** resultSum = addMatrices(matrix1, matrix2, rows, cols);
    double** resultProduct = multiplyMatrices(matrix1, matrix2, rows, cols, cols);

    clock_t end = clock();
    double timeSpent = (double)(end - start) / CLOCKS_PER_SEC;

    writeMatrixToFile(resultSum, rows, cols, output);
    writeMatrixToFile(resultProduct, rows, cols, output);

    printf("Time taken to perform operations: %f seconds\n", timeSpent);

    fclose(input);
    fclose(output);

    freeMatrix(matrix1, rows);
    freeMatrix(matrix2, rows);
    freeMatrix(resultSum, rows);
    freeMatrix(resultProduct, rows);

    return 0;
}

